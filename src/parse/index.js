/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var velocity = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"EOF":4,"statements":5,"statement":6,"references":7,"directives":8,"content":9,"COMMENT":10,"set":11,"if":12,"elseif":13,"else":14,"end":15,"foreach":16,"break":17,"define":18,"HASH":19,"NOESCAPE":20,"PARENTHESIS":21,"CLOSE_PARENTHESIS":22,"macro":23,"macro_call":24,"macro_block_call":25,"SET":26,"equal":27,"IF":28,"expression":29,"ELSEIF":30,"ELSE":31,"END":32,"FOREACH":33,"DOLLAR":34,"ID":35,"IN":36,"array":37,"BREAK":38,"DEFINE":39,"MACRO":40,"macro_args":41,"macro_call_args_all":42,"AT":43,"macro_call_args":44,"literals":45,"SPACE":46,"COMMA":47,"EQUAL":48,"map":49,"math":50,"||":51,"&&":52,"+":53,"-":54,"*":55,"/":56,"%":57,">":58,"<":59,"==":60,">=":61,"<=":62,"!=":63,"parenthesis":64,"!":65,"literal":66,"brace_begin":67,"attributes":68,"brace_end":69,"methodbd":70,"VAR_BEGIN":71,"MAP_BEGIN":72,"VAR_END":73,"MAP_END":74,"attribute":75,"method":76,"index":77,"property":78,"DOT":79,"params":80,"CONTENT":81,"BRACKET":82,"CLOSE_BRACKET":83,"string":84,"number":85,"BOOL":86,"integer":87,"INTEGER":88,"DECIMAL_POINT":89,"STRING":90,"EVAL_STRING":91,"range":92,"RANGE":93,"map_item":94,"MAP_SPLIT":95,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",10:"COMMENT",19:"HASH",20:"NOESCAPE",21:"PARENTHESIS",22:"CLOSE_PARENTHESIS",26:"SET",28:"IF",30:"ELSEIF",31:"ELSE",32:"END",33:"FOREACH",34:"DOLLAR",35:"ID",36:"IN",38:"BREAK",39:"DEFINE",40:"MACRO",43:"AT",46:"SPACE",47:"COMMA",48:"EQUAL",51:"||",52:"&&",53:"+",54:"-",55:"*",56:"/",57:"%",58:">",59:"<",60:"==",61:">=",62:"<=",63:"!=",65:"!",71:"VAR_BEGIN",72:"MAP_BEGIN",73:"VAR_END",74:"MAP_END",79:"DOT",81:"CONTENT",82:"BRACKET",83:"CLOSE_BRACKET",86:"BOOL",88:"INTEGER",89:"DECIMAL_POINT",90:"STRING",91:"EVAL_STRING",93:"RANGE",95:"MAP_SPLIT"},
productions_: [0,[3,1],[3,2],[5,1],[5,2],[6,1],[6,1],[6,1],[6,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,4],[8,1],[8,1],[8,1],[11,5],[12,5],[13,5],[14,2],[15,2],[16,8],[16,8],[17,2],[18,6],[23,6],[23,5],[41,1],[41,2],[24,5],[24,4],[25,6],[25,5],[44,1],[44,1],[44,3],[44,3],[44,3],[44,3],[42,1],[42,2],[42,3],[42,2],[27,3],[29,1],[29,1],[29,1],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,1],[50,2],[50,2],[50,1],[50,1],[64,3],[7,5],[7,3],[7,5],[7,3],[7,2],[7,4],[7,2],[7,4],[67,1],[67,1],[69,1],[69,1],[68,1],[68,2],[75,1],[75,1],[75,1],[76,2],[70,4],[70,3],[80,1],[80,1],[80,3],[80,3],[78,2],[78,2],[77,3],[77,3],[77,3],[77,2],[77,2],[66,1],[66,1],[66,1],[85,1],[85,3],[85,4],[87,1],[87,2],[84,1],[84,1],[45,1],[45,1],[45,1],[37,3],[37,1],[37,2],[92,5],[92,5],[92,5],[92,5],[49,3],[49,2],[94,3],[94,3],[94,2],[94,5],[94,5],[9,1],[9,1],[9,2],[9,3],[9,3],[9,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return []; 
break;
case 2: return $$[$0-1]; 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = [].concat($$[$0-1], $$[$0]); 
break;
case 5: $$[$0]['prue'] = true;  this.$ = $$[$0]; 
break;
case 6: this.$ = $$[$0]; 
break;
case 7: this.$ = $$[$0]; 
break;
case 8: this.$ = {type: 'comment', value: $$[$0] }; 
break;
case 9: this.$ = $$[$0]; 
break;
case 10: this.$ = $$[$0]; 
break;
case 11: this.$ = $$[$0]; 
break;
case 12: this.$ = $$[$0]; 
break;
case 13: this.$ = $$[$0]; 
break;
case 14: this.$ = $$[$0]; 
break;
case 15: this.$ = $$[$0]; 
break;
case 16: this.$ = $$[$0]; 
break;
case 17: this.$ = { type: 'noescape' }; 
break;
case 18: this.$ = $$[$0]; 
break;
case 19: this.$ = $$[$0]; 
break;
case 20: this.$ = $$[$0]; 
break;
case 21: this.$ = {type: 'set', equal: $$[$0-1] }; 
break;
case 22: this.$ = {type: 'if', condition: $$[$0-1] }; 
break;
case 23: this.$ = {type: 'elseif', condition: $$[$0-1] }; 
break;
case 24: this.$ = {type: 'else' }; 
break;
case 25: this.$ = {type: 'end' }; 
break;
case 26: this.$ = {type: 'foreach', to: $$[$0-3], from: $$[$0-1] }; 
break;
case 27: this.$ = {type: 'foreach', to: $$[$0-3], from: $$[$0-1] }; 
break;
case 28: this.$ = {type: $$[$0] }; 
break;
case 29: this.$ = {type: 'define', id: $$[$0-1] }; 
break;
case 30: this.$ = {type: 'macro', id: $$[$0-2], args: $$[$0-1] }; 
break;
case 31: this.$ = {type: 'macro', id: $$[$0-1] }; 
break;
case 32: this.$ = [$$[$0]]; 
break;
case 33: this.$ = [].concat($$[$0-1], $$[$0]); 
break;
case 34: this.$ = { type:"macro_call", id: $$[$0-3].replace(/^\s+|\s+$/g, ''), args: $$[$0-1] }; 
break;
case 35: this.$ = { type:"macro_call", id: $$[$0-2].replace(/^\s+|\s+$/g, '') }; 
break;
case 36: this.$ = { type:"macro_block_call", id: $$[$0-3].replace(/^\s+|\s+$/g, ''), args: $$[$0-1] }; 
break;
case 37: this.$ = { type:"macro_block_call", id: $$[$0-2].replace(/^\s+|\s+$/g, '') }; 
break;
case 38: this.$ = [$$[$0]]; 
break;
case 39: this.$ = [$$[$0]]; 
break;
case 40: this.$ = [].concat($$[$0-2], $$[$0]); 
break;
case 41: this.$ = [].concat($$[$0-2], $$[$0]); 
break;
case 42: this.$ = [].concat($$[$0-2], $$[$0]); 
break;
case 43: this.$ = [].concat($$[$0-2], $$[$0]); 
break;
case 44: this.$ = $$[$0]; 
break;
case 45: this.$ = $$[$0]; 
break;
case 46: this.$ = $$[$0-1]; 
break;
case 47: this.$ = $$[$0-1]; 
break;
case 48: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 49: this.$ = $$[$0]; 
break;
case 50: this.$ = $$[$0]; 
break;
case 51: this.$ = $$[$0]; 
break;
case 52: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 53: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 54: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 55: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 56: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 57: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 58: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 59: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 60: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 61: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 62: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 63: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 64: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 65: this.$ = $$[$0]; 
break;
case 66: this.$ = {type: 'math', expression: [$$[$0]], operator: 'minus' }; 
break;
case 67: this.$ = {type: 'math', expression: [$$[$0]], operator: 'not' }; 
break;
case 68: this.$ = $$[$0]; 
break;
case 69: this.$ = $$[$0]; 
break;
case 70: this.$ = {type: 'math', expression: [$$[$0-1]], operator: 'parenthesis' }; 
break;
case 71: this.$ = {type: "references", id: $$[$0-2], path: $$[$0-1], isWraped: true, leader: $$[$0-4] }; 
break;
case 72: this.$ = {type: "references", id: $$[$0-1], path: $$[$0], leader: $$[$0-2] }; 
break;
case 73: this.$ = {type: "references", id: $$[$0-2].id, path: $$[$0-1], isWraped: true, leader: $$[$0-4], args: $$[$0-2].args }; 
break;
case 74: this.$ = {type: "references", id: $$[$0-1].id, path: $$[$0], leader: $$[$0-2], args: $$[$0-1].args }; 
break;
case 75: this.$ = {type: "references", id: $$[$0], leader: $$[$0-1] }; 
break;
case 76: this.$ = {type: "references", id: $$[$0-1], isWraped: true, leader: $$[$0-3] }; 
break;
case 77: this.$ = {type: "references", id: $$[$0].id, leader: $$[$0-1], args: $$[$0].args }; 
break;
case 78: this.$ = {type: "references", id: $$[$0-1].id, isWraped: true, args: $$[$0-1].args, leader: $$[$0-3] }; 
break;
case 79: this.$ = $$[$0]; 
break;
case 80: this.$ = $$[$0]; 
break;
case 81: this.$ = $$[$0]; 
break;
case 82: this.$ = $$[$0]; 
break;
case 83: this.$ = [$$[$0]]; 
break;
case 84: this.$ = [].concat($$[$0-1], $$[$0]); 
break;
case 85: this.$ = {type:"method", id: $$[$0].id, args: $$[$0].args }; 
break;
case 86: this.$ = {type: "index", id: $$[$0] }; 
break;
case 87: this.$ = {type: "property", id: $$[$0] }; if ($$[$0].type === 'content') this.$ = $$[$0]; 
break;
case 88: this.$ = $$[$0]; 
break;
case 89: this.$ = {id: $$[$0-3], args: $$[$0-1] }; 
break;
case 90: this.$ = {id: $$[$0-2], args: false }; 
break;
case 91: this.$ = [$$[$0]]; 
break;
case 92: this.$ = [$$[$0]]; 
break;
case 93: this.$ = [].concat($$[$0-2], $$[$0]); 
break;
case 94: this.$ = [].concat($$[$0-2], $$[$0]); 
break;
case 95: this.$ = $$[$0]; 
break;
case 96: this.$ = {type: 'content', value: $$[$0-1] + $$[$0] }; 
break;
case 97: this.$ = $$[$0-1]; 
break;
case 98: this.$ = $$[$0-1]; 
break;
case 99: this.$ = {type: "content", value: $$[$0-2] + $$[$0-1].value + $$[$0] }; 
break;
case 100: this.$ = {type: "content", value: $$[$0-1] + $$[$0] }; 
break;
case 101: this.$ = {type: "content", value: $$[$0-1] + $$[$0] }; 
break;
case 102: this.$ = $$[$0]; 
break;
case 103: this.$ = $$[$0]; 
break;
case 104: this.$ = {type: 'bool', value: $$[$0] }; 
break;
case 105: this.$ = {type: "integer", value: $$[$0]}; 
break;
case 106: this.$ = {type: "decimal", value: + ($$[$0-2] + '.' + $$[$0]) }; 
break;
case 107: this.$ = {type: "decimal", value: - ($$[$0-2] + '.' + $$[$0]) }; 
break;
case 108: this.$ = $$[$0]; 
break;
case 109: this.$ = - parseInt($$[$0], 10); 
break;
case 110: this.$ = {type: 'string', value: $$[$0] }; 
break;
case 111: this.$ = {type: 'string', value: $$[$0], isEval: true }; 
break;
case 112: this.$ = $$[$0];
break;
case 113: this.$ = $$[$0];
break;
case 114: this.$ = $$[$0]; 
break;
case 115: this.$ = {type: 'array', value: $$[$0-1] }; 
break;
case 116: this.$ = $$[$0]; 
break;
case 117: this.$ = {type: 'array', value: [] }; 
break;
case 118: this.$ = {type: 'array', isRange: true, value: [$$[$0-3], $$[$0-1]]}; 
break;
case 119: this.$ = {type: 'array', isRange: true, value: [$$[$0-3], $$[$0-1]]}; 
break;
case 120: this.$ = {type: 'array', isRange: true, value: [$$[$0-3], $$[$0-1]]}; 
break;
case 121: this.$ = {type: 'array', isRange: true, value: [$$[$0-3], $$[$0-1]]}; 
break;
case 122: this.$ = {type: 'map', value: $$[$0-1] }; 
break;
case 123: this.$ = {type: 'map'}; 
break;
case 124: this.$ = {}; this.$[$$[$0-2].value] = $$[$0]; 
break;
case 125: this.$ = {}; this.$[$$[$0-2].value] = $$[$0]; 
break;
case 126: this.$ = {}; this.$[$$[$0-1].value] = $$[$01]; 
break;
case 127: this.$ = $$[$0-4]; this.$[$$[$0-2].value] = $$[$0]; 
break;
case 128: this.$ = $$[$0-4]; this.$[$$[$0-2].value] = $$[$0]; 
break;
case 129: this.$ = $$[$0]; 
break;
case 130: this.$ = $$[$0]; 
break;
case 131: this.$ = $$[$0-1] + $$[$0]; 
break;
case 132: this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 133: this.$ = $$[$0-2] + $$[$0-1]; 
break;
case 134: this.$ = $$[$0-1] + $$[$0]; 
break;
}
},
table: [{3:1,4:[1,2],5:3,6:4,7:5,8:6,9:7,10:[1,8],11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:[1,18],23:19,24:20,25:21,34:[1,9],35:[1,23],81:[1,22]},{1:[3]},{1:[2,1]},{4:[1,24],6:25,7:5,8:6,9:7,10:[1,8],11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:[1,18],23:19,24:20,25:21,34:[1,9],35:[1,23],81:[1,22]},{4:[2,3],10:[2,3],19:[2,3],34:[2,3],35:[2,3],81:[2,3]},{4:[2,5],10:[2,5],19:[2,5],34:[2,5],35:[2,5],81:[2,5]},{4:[2,6],10:[2,6],19:[2,6],34:[2,6],35:[2,6],81:[2,6]},{4:[2,7],10:[2,7],19:[2,7],34:[2,7],35:[2,7],81:[2,7]},{4:[2,8],10:[2,8],19:[2,8],34:[2,8],35:[2,8],81:[2,8]},{35:[1,27],67:26,69:29,70:28,71:[1,31],72:[1,32],73:[1,33],74:[1,34],81:[1,30]},{4:[2,9],10:[2,9],19:[2,9],34:[2,9],35:[2,9],81:[2,9]},{4:[2,10],10:[2,10],19:[2,10],34:[2,10],35:[2,10],81:[2,10]},{4:[2,11],10:[2,11],19:[2,11],34:[2,11],35:[2,11],81:[2,11]},{4:[2,12],10:[2,12],19:[2,12],34:[2,12],35:[2,12],81:[2,12]},{4:[2,13],10:[2,13],19:[2,13],34:[2,13],35:[2,13],81:[2,13]},{4:[2,14],10:[2,14],19:[2,14],34:[2,14],35:[2,14],81:[2,14]},{4:[2,15],10:[2,15],19:[2,15],34:[2,15],35:[2,15],81:[2,15]},{4:[2,16],10:[2,16],19:[2,16],34:[2,16],35:[2,16],81:[2,16]},{20:[1,35],26:[1,38],28:[1,39],30:[1,40],31:[1,41],32:[1,42],33:[1,43],35:[1,37],38:[1,44],39:[1,45],40:[1,46],43:[1,47],81:[1,36]},{4:[2,18],10:[2,18],19:[2,18],34:[2,18],35:[2,18],81:[2,18]},{4:[2,19],10:[2,19],19:[2,19],34:[2,19],35:[2,19],81:[2,19]},{4:[2,20],10:[2,20],19:[2,20],34:[2,20],35:[2,20],81:[2,20]},{4:[2,129],10:[2,129],19:[2,129],34:[2,129],35:[2,129],81:[2,129]},{4:[2,130],10:[2,130],19:[2,130],34:[2,130],35:[2,130],81:[2,130]},{1:[2,2]},{4:[2,4],10:[2,4],19:[2,4],34:[2,4],35:[2,4],81:[2,4]},{35:[1,48],70:49},{4:[2,75],10:[2,75],19:[2,75],21:[1,51],22:[2,75],34:[2,75],35:[2,75],46:[2,75],47:[2,75],48:[2,75],51:[2,75],52:[2,75],53:[2,75],54:[2,75],55:[2,75],56:[2,75],57:[2,75],58:[2,75],59:[2,75],60:[2,75],61:[2,75],62:[2,75],63:[2,75],68:50,74:[2,75],75:52,76:53,77:54,78:55,79:[1,56],81:[2,75],82:[1,57],83:[2,75],93:[2,75]},{4:[2,77],10:[2,77],19:[2,77],22:[2,77],34:[2,77],35:[2,77],46:[2,77],47:[2,77],48:[2,77],51:[2,77],52:[2,77],53:[2,77],54:[2,77],55:[2,77],56:[2,77],57:[2,77],58:[2,77],59:[2,77],60:[2,77],61:[2,77],62:[2,77],63:[2,77],68:58,74:[2,77],75:52,76:53,77:54,78:55,79:[1,56],81:[2,77],82:[1,57],83:[2,77],93:[2,77]},{35:[1,60],70:59},{4:[2,134],10:[2,134],19:[2,134],34:[2,134],35:[2,134],81:[2,134]},{35:[2,79]},{35:[2,80]},{4:[2,81],10:[2,81],19:[2,81],22:[2,81],34:[2,81],35:[2,81],46:[2,81],47:[2,81],48:[2,81],51:[2,81],52:[2,81],53:[2,81],54:[2,81],55:[2,81],56:[2,81],57:[2,81],58:[2,81],59:[2,81],60:[2,81],61:[2,81],62:[2,81],63:[2,81],74:[2,81],81:[2,81],83:[2,81],93:[2,81]},{4:[2,82],10:[2,82],19:[2,82],22:[2,82],34:[2,82],35:[2,82],46:[2,82],47:[2,82],48:[2,82],51:[2,82],52:[2,82],53:[2,82],54:[2,82],55:[2,82],56:[2,82],57:[2,82],58:[2,82],59:[2,82],60:[2,82],61:[2,82],62:[2,82],63:[2,82],74:[2,82],81:[2,82],83:[2,82],93:[2,82]},{21:[1,61]},{4:[2,131],10:[2,131],19:[2,131],34:[2,131],35:[2,131],81:[2,131]},{4:[1,63],21:[1,64],81:[1,62]},{21:[1,65]},{21:[1,66]},{21:[1,67]},{4:[2,24],10:[2,24],19:[2,24],34:[2,24],35:[2,24],81:[2,24]},{4:[2,25],10:[2,25],19:[2,25],34:[2,25],35:[2,25],81:[2,25]},{21:[1,68]},{4:[2,28],10:[2,28],19:[2,28],34:[2,28],35:[2,28],81:[2,28]},{21:[1,69]},{21:[1,70]},{35:[1,71]},{21:[1,51],68:72,69:73,73:[1,33],74:[1,34],75:52,76:53,77:54,78:55,79:[1,56],82:[1,57]},{68:74,75:52,76:53,77:54,78:55,79:[1,56],82:[1,57]},{4:[2,72],10:[2,72],19:[2,72],22:[2,72],34:[2,72],35:[2,72],46:[2,72],47:[2,72],48:[2,72],51:[2,72],52:[2,72],53:[2,72],54:[2,72],55:[2,72],56:[2,72],57:[2,72],58:[2,72],59:[2,72],60:[2,72],61:[2,72],62:[2,72],63:[2,72],74:[2,72],75:75,76:53,77:54,78:55,79:[1,56],81:[2,72],82:[1,57],83:[2,72],93:[2,72]},{7:79,22:[1,77],34:[1,83],37:80,45:78,49:81,54:[1,94],66:82,72:[1,86],80:76,82:[1,84],84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91],92:85},{4:[2,83],10:[2,83],19:[2,83],22:[2,83],34:[2,83],35:[2,83],46:[2,83],47:[2,83],48:[2,83],51:[2,83],52:[2,83],53:[2,83],54:[2,83],55:[2,83],56:[2,83],57:[2,83],58:[2,83],59:[2,83],60:[2,83],61:[2,83],62:[2,83],63:[2,83],73:[2,83],74:[2,83],79:[2,83],81:[2,83],82:[2,83],83:[2,83],93:[2,83]},{4:[2,85],10:[2,85],19:[2,85],22:[2,85],34:[2,85],35:[2,85],46:[2,85],47:[2,85],48:[2,85],51:[2,85],52:[2,85],53:[2,85],54:[2,85],55:[2,85],56:[2,85],57:[2,85],58:[2,85],59:[2,85],60:[2,85],61:[2,85],62:[2,85],63:[2,85],73:[2,85],74:[2,85],79:[2,85],81:[2,85],82:[2,85],83:[2,85],93:[2,85]},{4:[2,86],10:[2,86],19:[2,86],22:[2,86],34:[2,86],35:[2,86],46:[2,86],47:[2,86],48:[2,86],51:[2,86],52:[2,86],53:[2,86],54:[2,86],55:[2,86],56:[2,86],57:[2,86],58:[2,86],59:[2,86],60:[2,86],61:[2,86],62:[2,86],63:[2,86],73:[2,86],74:[2,86],79:[2,86],81:[2,86],82:[2,86],83:[2,86],93:[2,86]},{4:[2,87],10:[2,87],19:[2,87],22:[2,87],34:[2,87],35:[2,87],46:[2,87],47:[2,87],48:[2,87],51:[2,87],52:[2,87],53:[2,87],54:[2,87],55:[2,87],56:[2,87],57:[2,87],58:[2,87],59:[2,87],60:[2,87],61:[2,87],62:[2,87],63:[2,87],73:[2,87],74:[2,87],79:[2,87],81:[2,87],82:[2,87],83:[2,87],93:[2,87]},{35:[1,96],70:95,81:[1,97]},{7:99,34:[1,83],54:[1,94],66:98,81:[1,100],83:[1,101],84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91]},{4:[2,74],10:[2,74],19:[2,74],22:[2,74],34:[2,74],35:[2,74],46:[2,74],47:[2,74],48:[2,74],51:[2,74],52:[2,74],53:[2,74],54:[2,74],55:[2,74],56:[2,74],57:[2,74],58:[2,74],59:[2,74],60:[2,74],61:[2,74],62:[2,74],63:[2,74],74:[2,74],75:75,76:53,77:54,78:55,79:[1,56],81:[2,74],82:[1,57],83:[2,74],93:[2,74]},{69:102,73:[1,33],74:[1,34]},{21:[1,51]},{22:[1,103]},{4:[2,132],10:[2,132],19:[2,132],34:[2,132],35:[2,132],81:[2,132]},{4:[2,133],10:[2,133],19:[2,133],34:[2,133],35:[2,133],81:[2,133]},{7:109,22:[1,105],34:[1,83],37:80,42:104,44:106,45:108,46:[1,107],49:81,54:[1,94],66:82,72:[1,86],82:[1,84],84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91],92:85},{7:111,27:110,34:[1,83]},{7:119,21:[1,121],29:112,34:[1,83],37:113,49:114,50:115,54:[1,117],64:116,65:[1,118],66:120,72:[1,86],82:[1,84],84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91],92:85},{7:119,21:[1,121],29:122,34:[1,83],37:113,49:114,50:115,54:[1,117],64:116,65:[1,118],66:120,72:[1,86],82:[1,84],84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91],92:85},{34:[1,123]},{34:[1,124]},{35:[1,125]},{21:[1,126]},{69:127,73:[1,33],74:[1,34],75:75,76:53,77:54,78:55,79:[1,56],82:[1,57]},{4:[2,76],10:[2,76],19:[2,76],22:[2,76],34:[2,76],35:[2,76],46:[2,76],47:[2,76],48:[2,76],51:[2,76],52:[2,76],53:[2,76],54:[2,76],55:[2,76],56:[2,76],57:[2,76],58:[2,76],59:[2,76],60:[2,76],61:[2,76],62:[2,76],63:[2,76],74:[2,76],81:[2,76],83:[2,76],93:[2,76]},{69:128,73:[1,33],74:[1,34],75:75,76:53,77:54,78:55,79:[1,56],82:[1,57]},{4:[2,84],10:[2,84],19:[2,84],22:[2,84],34:[2,84],35:[2,84],46:[2,84],47:[2,84],48:[2,84],51:[2,84],52:[2,84],53:[2,84],54:[2,84],55:[2,84],56:[2,84],57:[2,84],58:[2,84],59:[2,84],60:[2,84],61:[2,84],62:[2,84],63:[2,84],73:[2,84],74:[2,84],79:[2,84],81:[2,84],82:[2,84],83:[2,84],93:[2,84]},{22:[1,129],47:[1,130]},{4:[2,90],10:[2,90],19:[2,90],22:[2,90],34:[2,90],35:[2,90],46:[2,90],47:[2,90],48:[2,90],51:[2,90],52:[2,90],53:[2,90],54:[2,90],55:[2,90],56:[2,90],57:[2,90],58:[2,90],59:[2,90],60:[2,90],61:[2,90],62:[2,90],63:[2,90],73:[2,90],74:[2,90],79:[2,90],81:[2,90],82:[2,90],83:[2,90],93:[2,90]},{22:[2,91],47:[2,91],83:[2,91]},{22:[2,92],47:[2,92]},{22:[2,112],46:[2,112],47:[2,112],74:[2,112],83:[2,112]},{22:[2,113],46:[2,113],47:[2,113],74:[2,113],83:[2,113]},{22:[2,114],46:[2,114],47:[2,114],74:[2,114],83:[2,114]},{35:[1,27],67:26,69:29,70:28,71:[1,31],72:[1,32],73:[1,33],74:[1,34]},{7:134,34:[1,83],37:80,45:78,49:81,54:[1,94],66:82,72:[1,86],80:131,82:[1,84],83:[1,132],84:87,85:88,86:[1,89],87:133,88:[1,93],90:[1,90],91:[1,91],92:85},{22:[2,116],46:[2,116],47:[2,116],74:[2,116],83:[2,116]},{74:[1,136],84:137,90:[1,90],91:[1,91],94:135},{22:[2,102],46:[2,102],47:[2,102],51:[2,102],52:[2,102],53:[2,102],54:[2,102],55:[2,102],56:[2,102],57:[2,102],58:[2,102],59:[2,102],60:[2,102],61:[2,102],62:[2,102],63:[2,102],74:[2,102],81:[2,102],83:[2,102]},{22:[2,103],46:[2,103],47:[2,103],51:[2,103],52:[2,103],53:[2,103],54:[2,103],55:[2,103],56:[2,103],57:[2,103],58:[2,103],59:[2,103],60:[2,103],61:[2,103],62:[2,103],63:[2,103],74:[2,103],81:[2,103],83:[2,103]},{22:[2,104],46:[2,104],47:[2,104],51:[2,104],52:[2,104],53:[2,104],54:[2,104],55:[2,104],56:[2,104],57:[2,104],58:[2,104],59:[2,104],60:[2,104],61:[2,104],62:[2,104],63:[2,104],74:[2,104],81:[2,104],83:[2,104]},{22:[2,110],46:[2,110],47:[2,110],51:[2,110],52:[2,110],53:[2,110],54:[2,110],55:[2,110],56:[2,110],57:[2,110],58:[2,110],59:[2,110],60:[2,110],61:[2,110],62:[2,110],63:[2,110],74:[2,110],81:[2,110],83:[2,110],95:[2,110]},{22:[2,111],46:[2,111],47:[2,111],51:[2,111],52:[2,111],53:[2,111],54:[2,111],55:[2,111],56:[2,111],57:[2,111],58:[2,111],59:[2,111],60:[2,111],61:[2,111],62:[2,111],63:[2,111],74:[2,111],81:[2,111],83:[2,111],95:[2,111]},{22:[2,105],46:[2,105],47:[2,105],51:[2,105],52:[2,105],53:[2,105],54:[2,105],55:[2,105],56:[2,105],57:[2,105],58:[2,105],59:[2,105],60:[2,105],61:[2,105],62:[2,105],63:[2,105],74:[2,105],81:[2,105],83:[2,105]},{22:[2,108],46:[2,108],47:[2,108],51:[2,108],52:[2,108],53:[2,108],54:[2,108],55:[2,108],56:[2,108],57:[2,108],58:[2,108],59:[2,108],60:[2,108],61:[2,108],62:[2,108],63:[2,108],74:[2,108],81:[2,108],83:[2,108],89:[1,138],93:[2,108]},{88:[1,139]},{4:[2,88],10:[2,88],19:[2,88],22:[2,88],34:[2,88],35:[2,88],46:[2,88],47:[2,88],48:[2,88],51:[2,88],52:[2,88],53:[2,88],54:[2,88],55:[2,88],56:[2,88],57:[2,88],58:[2,88],59:[2,88],60:[2,88],61:[2,88],62:[2,88],63:[2,88],73:[2,88],74:[2,88],79:[2,88],81:[2,88],82:[2,88],83:[2,88],93:[2,88]},{4:[2,95],10:[2,95],19:[2,95],21:[1,51],22:[2,95],34:[2,95],35:[2,95],46:[2,95],47:[2,95],48:[2,95],51:[2,95],52:[2,95],53:[2,95],54:[2,95],55:[2,95],56:[2,95],57:[2,95],58:[2,95],59:[2,95],60:[2,95],61:[2,95],62:[2,95],63:[2,95],73:[2,95],74:[2,95],79:[2,95],81:[2,95],82:[2,95],83:[2,95],93:[2,95]},{4:[2,96],10:[2,96],19:[2,96],22:[2,96],34:[2,96],35:[2,96],46:[2,96],47:[2,96],48:[2,96],51:[2,96],52:[2,96],53:[2,96],54:[2,96],55:[2,96],56:[2,96],57:[2,96],58:[2,96],59:[2,96],60:[2,96],61:[2,96],62:[2,96],63:[2,96],73:[2,96],74:[2,96],79:[2,96],81:[2,96],82:[2,96],83:[2,96],93:[2,96]},{81:[1,141],83:[1,140]},{83:[1,142]},{4:[2,100],10:[2,100],19:[2,100],22:[2,100],34:[2,100],35:[2,100],46:[2,100],47:[2,100],48:[2,100],51:[2,100],52:[2,100],53:[2,100],54:[2,100],55:[2,100],56:[2,100],57:[2,100],58:[2,100],59:[2,100],60:[2,100],61:[2,100],62:[2,100],63:[2,100],73:[2,100],74:[2,100],79:[2,100],81:[2,100],82:[2,100],83:[2,100],93:[2,100]},{4:[2,101],10:[2,101],19:[2,101],22:[2,101],34:[2,101],35:[2,101],46:[2,101],47:[2,101],48:[2,101],51:[2,101],52:[2,101],53:[2,101],54:[2,101],55:[2,101],56:[2,101],57:[2,101],58:[2,101],59:[2,101],60:[2,101],61:[2,101],62:[2,101],63:[2,101],73:[2,101],74:[2,101],79:[2,101],81:[2,101],82:[2,101],83:[2,101],93:[2,101]},{4:[2,78],10:[2,78],19:[2,78],22:[2,78],34:[2,78],35:[2,78],46:[2,78],47:[2,78],48:[2,78],51:[2,78],52:[2,78],53:[2,78],54:[2,78],55:[2,78],56:[2,78],57:[2,78],58:[2,78],59:[2,78],60:[2,78],61:[2,78],62:[2,78],63:[2,78],74:[2,78],81:[2,78],83:[2,78],93:[2,78]},{4:[2,17],10:[2,17],19:[2,17],34:[2,17],35:[2,17],81:[2,17]},{22:[1,143]},{4:[2,35],10:[2,35],19:[2,35],34:[2,35],35:[2,35],81:[2,35]},{22:[2,44],46:[1,144],47:[1,145]},{7:109,34:[1,83],37:80,44:146,45:108,49:81,54:[1,94],66:82,72:[1,86],82:[1,84],84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91],92:85},{22:[2,38],46:[2,38],47:[2,38]},{22:[2,39],46:[2,39],47:[2,39]},{22:[1,147]},{48:[1,148]},{22:[1,149]},{22:[2,49]},{22:[2,50]},{22:[2,51],51:[1,150],52:[1,151],53:[1,152],54:[1,153],55:[1,154],56:[1,155],57:[1,156],58:[1,157],59:[1,158],60:[1,159],61:[1,160],62:[1,161],63:[1,162]},{22:[2,65],51:[2,65],52:[2,65],53:[2,65],54:[2,65],55:[2,65],56:[2,65],57:[2,65],58:[2,65],59:[2,65],60:[2,65],61:[2,65],62:[2,65],63:[2,65]},{21:[1,121],64:163,88:[1,139]},{7:119,21:[1,121],34:[1,83],50:164,54:[1,117],64:116,65:[1,118],66:120,84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91]},{22:[2,68],51:[2,68],52:[2,68],53:[2,68],54:[2,68],55:[2,68],56:[2,68],57:[2,68],58:[2,68],59:[2,68],60:[2,68],61:[2,68],62:[2,68],63:[2,68]},{22:[2,69],51:[2,69],52:[2,69],53:[2,69],54:[2,69],55:[2,69],56:[2,69],57:[2,69],58:[2,69],59:[2,69],60:[2,69],61:[2,69],62:[2,69],63:[2,69]},{7:119,21:[1,121],34:[1,83],50:165,54:[1,117],64:116,65:[1,118],66:120,84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91]},{22:[1,166]},{35:[1,167]},{35:[1,168]},{7:171,22:[1,170],34:[1,83],41:169},{7:109,22:[1,173],34:[1,83],37:80,42:172,44:106,45:108,46:[1,107],49:81,54:[1,94],66:82,72:[1,86],82:[1,84],84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91],92:85},{4:[2,71],10:[2,71],19:[2,71],22:[2,71],34:[2,71],35:[2,71],46:[2,71],47:[2,71],48:[2,71],51:[2,71],52:[2,71],53:[2,71],54:[2,71],55:[2,71],56:[2,71],57:[2,71],58:[2,71],59:[2,71],60:[2,71],61:[2,71],62:[2,71],63:[2,71],74:[2,71],81:[2,71],83:[2,71],93:[2,71]},{4:[2,73],10:[2,73],19:[2,73],22:[2,73],34:[2,73],35:[2,73],46:[2,73],47:[2,73],48:[2,73],51:[2,73],52:[2,73],53:[2,73],54:[2,73],55:[2,73],56:[2,73],57:[2,73],58:[2,73],59:[2,73],60:[2,73],61:[2,73],62:[2,73],63:[2,73],74:[2,73],81:[2,73],83:[2,73],93:[2,73]},{4:[2,89],10:[2,89],19:[2,89],22:[2,89],34:[2,89],35:[2,89],46:[2,89],47:[2,89],48:[2,89],51:[2,89],52:[2,89],53:[2,89],54:[2,89],55:[2,89],56:[2,89],57:[2,89],58:[2,89],59:[2,89],60:[2,89],61:[2,89],62:[2,89],63:[2,89],73:[2,89],74:[2,89],79:[2,89],81:[2,89],82:[2,89],83:[2,89],93:[2,89]},{7:175,34:[1,83],37:80,45:174,49:81,54:[1,94],66:82,72:[1,86],82:[1,84],84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91],92:85},{47:[1,130],83:[1,176]},{22:[2,117],46:[2,117],47:[2,117],74:[2,117],83:[2,117]},{47:[2,105],83:[2,105],93:[1,177]},{47:[2,92],83:[2,92],93:[1,178]},{47:[1,180],74:[1,179]},{22:[2,123],46:[2,123],47:[2,123],74:[2,123],83:[2,123]},{95:[1,181]},{88:[1,182]},{22:[2,109],46:[2,109],47:[2,109],51:[2,109],52:[2,109],53:[2,109],54:[2,109],55:[2,109],56:[2,109],57:[2,109],58:[2,109],59:[2,109],60:[2,109],61:[2,109],62:[2,109],63:[2,109],74:[2,109],81:[2,109],83:[2,109],89:[1,183],93:[2,109]},{4:[2,97],10:[2,97],19:[2,97],22:[2,97],34:[2,97],35:[2,97],46:[2,97],47:[2,97],48:[2,97],51:[2,97],52:[2,97],53:[2,97],54:[2,97],55:[2,97],56:[2,97],57:[2,97],58:[2,97],59:[2,97],60:[2,97],61:[2,97],62:[2,97],63:[2,97],73:[2,97],74:[2,97],79:[2,97],81:[2,97],82:[2,97],83:[2,97],93:[2,97]},{4:[2,99],10:[2,99],19:[2,99],22:[2,99],34:[2,99],35:[2,99],46:[2,99],47:[2,99],48:[2,99],51:[2,99],52:[2,99],53:[2,99],54:[2,99],55:[2,99],56:[2,99],57:[2,99],58:[2,99],59:[2,99],60:[2,99],61:[2,99],62:[2,99],63:[2,99],73:[2,99],74:[2,99],79:[2,99],81:[2,99],82:[2,99],83:[2,99],93:[2,99]},{4:[2,98],10:[2,98],19:[2,98],22:[2,98],34:[2,98],35:[2,98],46:[2,98],47:[2,98],48:[2,98],51:[2,98],52:[2,98],53:[2,98],54:[2,98],55:[2,98],56:[2,98],57:[2,98],58:[2,98],59:[2,98],60:[2,98],61:[2,98],62:[2,98],63:[2,98],73:[2,98],74:[2,98],79:[2,98],81:[2,98],82:[2,98],83:[2,98],93:[2,98]},{4:[2,34],10:[2,34],19:[2,34],34:[2,34],35:[2,34],81:[2,34]},{7:185,22:[2,47],34:[1,83],37:80,45:184,49:81,54:[1,94],66:82,72:[1,86],82:[1,84],84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91],92:85},{7:187,34:[1,83],37:80,45:186,49:81,54:[1,94],66:82,72:[1,86],82:[1,84],84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91],92:85},{22:[2,45],46:[1,188],47:[1,145]},{4:[2,21],10:[2,21],19:[2,21],34:[2,21],35:[2,21],81:[2,21]},{7:119,21:[1,121],29:189,34:[1,83],37:113,49:114,50:115,54:[1,117],64:116,65:[1,118],66:120,72:[1,86],82:[1,84],84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91],92:85},{4:[2,22],10:[2,22],19:[2,22],34:[2,22],35:[2,22],81:[2,22]},{7:119,21:[1,121],34:[1,83],50:190,54:[1,117],64:116,65:[1,118],66:120,84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91]},{7:119,21:[1,121],34:[1,83],50:191,54:[1,117],64:116,65:[1,118],66:120,84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91]},{7:119,21:[1,121],34:[1,83],50:192,54:[1,117],64:116,65:[1,118],66:120,84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91]},{7:119,21:[1,121],34:[1,83],50:193,54:[1,117],64:116,65:[1,118],66:120,84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91]},{7:119,21:[1,121],34:[1,83],50:194,54:[1,117],64:116,65:[1,118],66:120,84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91]},{7:119,21:[1,121],34:[1,83],50:195,54:[1,117],64:116,65:[1,118],66:120,84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91]},{7:119,21:[1,121],34:[1,83],50:196,54:[1,117],64:116,65:[1,118],66:120,84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91]},{7:119,21:[1,121],34:[1,83],50:197,54:[1,117],64:116,65:[1,118],66:120,84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91]},{7:119,21:[1,121],34:[1,83],50:198,54:[1,117],64:116,65:[1,118],66:120,84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91]},{7:119,21:[1,121],34:[1,83],50:199,54:[1,117],64:116,65:[1,118],66:120,84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91]},{7:119,21:[1,121],34:[1,83],50:200,54:[1,117],64:116,65:[1,118],66:120,84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91]},{7:119,21:[1,121],34:[1,83],50:201,54:[1,117],64:116,65:[1,118],66:120,84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91]},{7:119,21:[1,121],34:[1,83],50:202,54:[1,117],64:116,65:[1,118],66:120,84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91]},{22:[2,66],51:[2,66],52:[2,66],53:[2,66],54:[2,66],55:[2,66],56:[2,66],57:[2,66],58:[2,66],59:[2,66],60:[2,66],61:[2,66],62:[2,66],63:[2,66]},{22:[2,67],51:[2,67],52:[2,67],53:[2,67],54:[2,67],55:[2,67],56:[2,67],57:[2,67],58:[2,67],59:[2,67],60:[2,67],61:[2,67],62:[2,67],63:[2,67]},{22:[1,203],51:[1,150],52:[1,151],53:[1,152],54:[1,153],55:[1,154],56:[1,155],57:[1,156],58:[1,157],59:[1,158],60:[1,159],61:[1,160],62:[1,161],63:[1,162]},{4:[2,23],10:[2,23],19:[2,23],34:[2,23],35:[2,23],81:[2,23]},{36:[1,204]},{22:[1,205]},{7:207,22:[1,206],34:[1,83]},{4:[2,31],10:[2,31],19:[2,31],34:[2,31],35:[2,31],81:[2,31]},{22:[2,32],34:[2,32]},{22:[1,208]},{4:[2,37],10:[2,37],19:[2,37],34:[2,37],35:[2,37],81:[2,37]},{22:[2,93],47:[2,93],83:[2,93]},{22:[2,94],47:[2,94],83:[2,94]},{22:[2,115],46:[2,115],47:[2,115],74:[2,115],83:[2,115]},{7:210,34:[1,83],54:[1,212],87:209,88:[1,211]},{7:214,34:[1,83],54:[1,212],87:213,88:[1,211]},{22:[2,122],46:[2,122],47:[2,122],74:[2,122],83:[2,122]},{84:215,90:[1,90],91:[1,91]},{7:217,34:[1,83],37:80,45:216,47:[2,126],49:81,54:[1,94],66:82,72:[1,86],74:[2,126],82:[1,84],84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91],92:85},{22:[2,106],46:[2,106],47:[2,106],51:[2,106],52:[2,106],53:[2,106],54:[2,106],55:[2,106],56:[2,106],57:[2,106],58:[2,106],59:[2,106],60:[2,106],61:[2,106],62:[2,106],63:[2,106],74:[2,106],81:[2,106],83:[2,106]},{88:[1,218]},{22:[2,40],46:[2,40],47:[2,40]},{22:[2,43],46:[2,43],47:[2,43]},{22:[2,41],46:[2,41],47:[2,41]},{22:[2,42],46:[2,42],47:[2,42]},{7:185,22:[2,46],34:[1,83],37:80,45:184,49:81,54:[1,94],66:82,72:[1,86],82:[1,84],84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91],92:85},{22:[2,48]},{22:[2,52],51:[2,52],52:[2,52],53:[1,152],54:[1,153],55:[1,154],56:[1,155],57:[1,156],58:[1,157],59:[1,158],60:[1,159],61:[1,160],62:[1,161],63:[1,162]},{22:[2,53],51:[2,53],52:[2,53],53:[1,152],54:[1,153],55:[1,154],56:[1,155],57:[1,156],58:[1,157],59:[1,158],60:[1,159],61:[1,160],62:[1,161],63:[1,162]},{22:[2,54],51:[2,54],52:[2,54],53:[2,54],54:[2,54],55:[1,154],56:[1,155],57:[1,156],58:[2,54],59:[2,54],60:[2,54],61:[2,54],62:[2,54],63:[2,54]},{22:[2,55],51:[2,55],52:[2,55],53:[2,55],54:[2,55],55:[1,154],56:[1,155],57:[1,156],58:[2,55],59:[2,55],60:[2,55],61:[2,55],62:[2,55],63:[2,55]},{22:[2,56],51:[2,56],52:[2,56],53:[2,56],54:[2,56],55:[2,56],56:[2,56],57:[2,56],58:[2,56],59:[2,56],60:[2,56],61:[2,56],62:[2,56],63:[2,56]},{22:[2,57],51:[2,57],52:[2,57],53:[2,57],54:[2,57],55:[2,57],56:[2,57],57:[2,57],58:[2,57],59:[2,57],60:[2,57],61:[2,57],62:[2,57],63:[2,57]},{22:[2,58],51:[2,58],52:[2,58],53:[2,58],54:[2,58],55:[2,58],56:[2,58],57:[2,58],58:[2,58],59:[2,58],60:[2,58],61:[2,58],62:[2,58],63:[2,58]},{22:[2,59],51:[2,59],52:[2,59],53:[1,152],54:[1,153],55:[1,154],56:[1,155],57:[1,156],58:[2,59],59:[2,59],60:[2,59],61:[2,59],62:[2,59],63:[2,59]},{22:[2,60],51:[2,60],52:[2,60],53:[1,152],54:[1,153],55:[1,154],56:[1,155],57:[1,156],58:[2,60],59:[2,60],60:[2,60],61:[2,60],62:[2,60],63:[2,60]},{22:[2,61],51:[2,61],52:[2,61],53:[1,152],54:[1,153],55:[1,154],56:[1,155],57:[1,156],58:[2,61],59:[2,61],60:[2,61],61:[2,61],62:[2,61],63:[2,61]},{22:[2,62],51:[2,62],52:[2,62],53:[1,152],54:[1,153],55:[1,154],56:[1,155],57:[1,156],58:[2,62],59:[2,62],60:[2,62],61:[2,62],62:[2,62],63:[2,62]},{22:[2,63],51:[2,63],52:[2,63],53:[1,152],54:[1,153],55:[1,154],56:[1,155],57:[1,156],58:[2,63],59:[2,63],60:[2,63],61:[2,63],62:[2,63],63:[2,63]},{22:[2,64],51:[2,64],52:[2,64],53:[1,152],54:[1,153],55:[1,154],56:[1,155],57:[1,156],58:[2,64],59:[2,64],60:[2,64],61:[2,64],62:[2,64],63:[2,64]},{22:[2,70],51:[2,70],52:[2,70],53:[2,70],54:[2,70],55:[2,70],56:[2,70],57:[2,70],58:[2,70],59:[2,70],60:[2,70],61:[2,70],62:[2,70],63:[2,70]},{7:219,34:[1,83],37:220,82:[1,84],92:85},{4:[2,29],10:[2,29],19:[2,29],34:[2,29],35:[2,29],81:[2,29]},{4:[2,30],10:[2,30],19:[2,30],34:[2,30],35:[2,30],81:[2,30]},{22:[2,33],34:[2,33]},{4:[2,36],10:[2,36],19:[2,36],34:[2,36],35:[2,36],81:[2,36]},{83:[1,221]},{83:[1,222]},{83:[2,108]},{88:[1,223]},{83:[1,224]},{83:[1,225]},{95:[1,226]},{47:[2,124],74:[2,124]},{47:[2,125],74:[2,125]},{22:[2,107],46:[2,107],47:[2,107],51:[2,107],52:[2,107],53:[2,107],54:[2,107],55:[2,107],56:[2,107],57:[2,107],58:[2,107],59:[2,107],60:[2,107],61:[2,107],62:[2,107],63:[2,107],74:[2,107],81:[2,107],83:[2,107]},{22:[1,227]},{22:[1,228]},{22:[2,118],46:[2,118],47:[2,118],74:[2,118],83:[2,118]},{22:[2,120],46:[2,120],47:[2,120],74:[2,120],83:[2,120]},{83:[2,109]},{22:[2,119],46:[2,119],47:[2,119],74:[2,119],83:[2,119]},{22:[2,121],46:[2,121],47:[2,121],74:[2,121],83:[2,121]},{7:229,34:[1,83],37:80,45:230,49:81,54:[1,94],66:82,72:[1,86],82:[1,84],84:87,85:88,86:[1,89],87:92,88:[1,93],90:[1,90],91:[1,91],92:85},{4:[2,26],10:[2,26],19:[2,26],34:[2,26],35:[2,26],81:[2,26]},{4:[2,27],10:[2,27],19:[2,27],34:[2,27],35:[2,27],81:[2,27]},{47:[2,127],74:[2,127]},{47:[2,128],74:[2,128]}],
defaultActions: {2:[2,1],24:[2,2],31:[2,79],32:[2,80],113:[2,49],114:[2,50],189:[2,48],211:[2,108],223:[2,109]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                                    var _reg = /\\+$/;
                                    var _esc = yy_.yytext.match(_reg);
                                    var _num = _esc ? _esc[0].length: null;
                                    /*转义实现，非常恶心，暂时没有好的解决方案*/
                                    if (!_num || !(_num % 2)) {
                                      this.begin("mu");
                                    } else {
                                      yy_.yytext = yy_.yytext.replace(/\\$/, '');
                                      this.begin('esc');
                                    }
                                    if (_num > 1) yy_.yytext = yy_.yytext.replace(/(\\\\)+$/, '\\');
                                    if(yy_.yytext) return 81; 
                                  
break;
case 1: 
                                    var _reg = /\\+$/;
                                    var _esc = yy_.yytext.match(_reg);
                                    var _num = _esc ? _esc[0].length: null;
                                    if (!_num || !(_num % 2)) {
                                      this.begin("h");
                                    } else {
                                      yy_.yytext = yy_.yytext.replace(/\\$/, '');
                                      this.begin('esc');
                                    }
                                    if (_num > 1) yy_.yytext = yy_.yytext.replace(/(\\\\)+$/, '\\');
                                    if(yy_.yytext) return 81; 
                                  
break;
case 2: return 81; 
break;
case 3: this.popState(); return 10; 
break;
case 4: this.popState(); yy_.yytext = yy_.yytext.replace(/^#\[\[|\]\]#$/g, ''); return 81
break;
case 5: this.popState(); return 10; 
break;
case 6: return 19; 
break;
case 7: return 43; 
break;
case 8: return 26; 
break;
case 9: return 28; 
break;
case 10: return 30; 
break;
case 11: this.popState(); return 31; 
break;
case 12: this.popState(); return 31; 
break;
case 13: this.popState(); return 32; 
break;
case 14: this.popState(); return 38; 
break;
case 15: return 33; 
break;
case 16: return 20; 
break;
case 17: return 39; 
break;
case 18: return 40; 
break;
case 19: return 36; 
break;
case 20: return yy_.yytext; 
break;
case 21: return yy_.yytext; 
break;
case 22: return yy_.yytext; 
break;
case 23: return yy_.yytext; 
break;
case 24: return yy_.yytext; 
break;
case 25: return yy_.yytext; 
break;
case 26: return yy_.yytext; 
break;
case 27: return yy_.yytext; 
break;
case 28: return 34; 
break;
case 29: return 34; 
break;
case 30: return yy_.yytext; 
break;
case 31: return 48; 
break;
case 32: 
                                    var conditionStack = this.conditionStack;
                                    var len = conditionStack.length;
                                    if (len >= 2 && conditionStack[len - 1] === 'c' && conditionStack[len - 2] === 'run') {
                                      return 46;
                                    }
                                  
break;
case 33: /*ignore whitespace*/ 
break;
case 34: return 72; 
break;
case 35: return 74; 
break;
case 36: return 95; 
break;
case 37: yy.begin = true; return 71; 
break;
case 38: this.popState(); if (yy.begin === true) { yy.begin = false; return 73;} else { return 81; } 
break;
case 39: this.begin("c"); return 21; 
break;
case 40: 
                                    if (this.popState() === "c") {
                                      var conditionStack = this.conditionStack;
                                      var len = conditionStack.length;

                                      if (conditionStack[len - 1] === 'run') {
                                        this.popState();
                                        len = len - 1;
                                      }

                                      /** 遇到#set(a = b)括号结束后结束状态h*/
                                      if (len === 2 && conditionStack[1] === "h"){
                                        this.popState();
                                      } else if (len === 3 && conditionStack[1] === "mu" && conditionStack[2] === "h") {
                                        // issue#7 $foo#if($a)...#end
                                        this.popState();
                                        this.popState();
                                      }

                                      return 22; 
                                    } else {
                                      return 81; 
                                    }
                                  
break;
case 41: this.begin("i"); return 82; 
break;
case 42: 
                                    if (this.popState() === "i") {
                                      return 83; 
                                    } else {
                                      return 81;
                                    }
                                  
break;
case 43: return 93; 
break;
case 44: return 79; 
break;
case 45: return 89; 
break;
case 46: return 47; 
break;
case 47: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2).replace(/\\"/g,'"'); return 91; 
break;
case 48: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2).replace(/\\'/g,"'"); return 90; 
break;
case 49: return 86; 
break;
case 50: return 86; 
break;
case 51: return 86; 
break;
case 52: return 88; 
break;
case 53: return 35; 
break;
case 54: this.begin("run"); return 35; 
break;
case 55: this.begin('h'); return 19; 
break;
case 56: this.begin('h'); return 43; 
break;
case 57: this.popState(); return 81; 
break;
case 58: this.popState(); return 81; 
break;
case 59: this.popState(); return 81; 
break;
case 60: this.popState(); return 4; 
break;
case 61: return 4; 
break;
}
},
rules: [/^(?:[^#]*?(?=\$))/,/^(?:[^\$]*?(?=#))/,/^(?:[^\x00]+)/,/^(?:#\*[\s\S]+?\*#)/,/^(?:#\[\[[\s\S]+?\]\]#)/,/^(?:##[^\n]+)/,/^(?:#(?=[a-zA-Z{@]))/,/^(?:@(?=[a-zA-Z{]))/,/^(?:set[ ]*)/,/^(?:if[ ]*)/,/^(?:elseif[ ]*)/,/^(?:else\b)/,/^(?:\{else\})/,/^(?:end\b)/,/^(?:break\b)/,/^(?:foreach[ ]*)/,/^(?:noescape\b)/,/^(?:define[ ]*)/,/^(?:macro[ ]*)/,/^(?:in\b)/,/^(?:[%\+\-\*/])/,/^(?:<=)/,/^(?:>=)/,/^(?:[><])/,/^(?:==)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:\$!(?=[{a-zA-Z_]))/,/^(?:\$(?=[{a-zA-Z_]))/,/^(?:!)/,/^(?:=)/,/^(?:[ ]+(?=[^,]))/,/^(?:\s+)/,/^(?:\{)/,/^(?:\})/,/^(?::[ ]*)/,/^(?:\{)/,/^(?:\})/,/^(?:\([\s]*(?=[$'"\[\{\-0-9\w()!]))/,/^(?:\))/,/^(?:\[[\s]*(?=[\-$"'0-9{\[\]]+))/,/^(?:\])/,/^(?:\.\.)/,/^(?:\.(?=[a-zA-Z_]))/,/^(?:\.(?=[\d]))/,/^(?:,[ ]*)/,/^(?:"(\\"|[^\"])*")/,/^(?:'(\\'|[^\'])*')/,/^(?:null\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:[0-9]+)/,/^(?:[_a-zA-Z][a-zA-Z0-9_\-]*)/,/^(?:[_a-zA-Z][a-zA-Z0-9_\-]*[ ]*(?=\())/,/^(?:#)/,/^(?:@)/,/^(?:.)/,/^(?:\s+)/,/^(?:[\$#])/,/^(?:$)/,/^(?:$)/],
conditions: {"mu":{"rules":[5,28,29,37,38,39,40,41,42,44,53,55,56,57,58,60],"inclusive":false},"c":{"rules":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,44,45,46,47,48,49,50,51,52,53],"inclusive":false},"i":{"rules":[19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,34,35,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":false},"h":{"rules":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,28,29,30,31,36,39,40,41,42,44,52,54,57,58,60],"inclusive":false},"esc":{"rules":[59],"inclusive":false},"run":{"rules":[28,29,30,32,33,34,35,36,39,40,41,42,44,45,46,47,48,49,50,51,52,53,57,58,60],"inclusive":false},"INITIAL":{"rules":[0,1,2,61],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = velocity;
exports.Parser = velocity.Parser;
exports.parse = function () { return velocity.parse.apply(velocity, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}